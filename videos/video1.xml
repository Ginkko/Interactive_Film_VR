<krpano>	<!-- webvr.xml - WebVR plugin, enter/exit VR buttons, VR cursor, VR setup -->	<include url="plugins/webvr.xml" />	<!-- add/overwrite some settings from the webvr.xml for this example -->	<plugin name="WebVR" mobilevr_fake_support="true" />		<!-- enable the FAKE VR support to allow testing also on desktop and tablets without VR support -->	<layer name="webvr_button" ondown="video_auto_start();" />	<!-- use the dragging control by default -->	<control mousetype="drag2d" />	<!-- allow scene switching by the PageUp/PageDown keys -->	<events name="keybcontrol" keep="true" onkeyup="if(keycode == 33, nextscene_loop(-1)); if(keycode == 34, nextscene_loop(+1));" /><!-- BEGIN INTRO VIDEO -->    <view hlookat="0" vlookat="0" maxpixelzoom="1.0" fovmax="150" limitview="auto" />		<poster url="bridge_still.png" /><!-- END INTRO VIDEO --><hotspot style="scene_hotspot" keep="true" name="spot" url="transparent.png" vrtimeout="6000" zorder="5" distorted="true" ath="0" atv="0" scale="0.8" rx="0" ry="50" rz="0" ox="250" oy="100" onover="set(hotspot[spot_over].visible,true); tween(hotspot[spot_over].alpha,1,0.5,default);" onout="tween(hotspot[spot_over].alpha,0,0.5,default; set(hotspot[spot_over].visible,false);" onclick="set(hotspot[spot_over].visible,false); set(hotspot[spot_click].visible,true); set(hotspot[exit].visible, true); set(hotspot[exit].enabled, true); set(hotspot[spot].enabled,false); tween(hotspot[spot_click].alpha,1,0.5,default); tween(hotspot[exit].alpha,1,0.5,default); pause_video();"/><hotspot style="scene_hotspot" keep="true" name="spot_over" url="Small_Rock_Icon.png" zorder="6" visible="false" enabled="false" alpha="0" onloaded="copyhotspotsettingsfrom(spot);"/><hotspot style="scene_hotspot" keep="true" name="spot_click" url="wouldyouliketoknowmore.png" zorder="6" visible="false" enabled="false" alpha="0"  onloaded="copyhotspotsettingsfrom(spot);"/><hotspot style="scene_hotspot" keep="true" name="exit" url="exit_icon.png" distorted="true" auh="0" atv="0" scale="0.5" rx="0" ry="50" rz="0" ox="250" oy="300" zorder="8" visible="false" enabled="false" alpha="0" onclick="set(hotspot[spot].enabled, true); set(hotspot[spot].visible, true); set(hotspot[spot_click].enabled, false); set(hotspot[spot_click].visible, false); set(hotspot[exit].visible, false); pause_video();"/><action name="copyhotspotsettingsfrom">	copy(distorted, hotspot[%1].distorted); copy(ath, hotspot[%1].ath); copy(atv, hotspot[%1].atv); copy(scale, hotspot[%1].scale); copy(rx, hotspot[%1].rx); copy(ry, hotspot[%1].ry); copy(rz, hotspot[%1].rz); copy(ox, hotspot[%1].ox); copy(oy, hotspot[%1].oy); copy(oz, hotspot[%1].oz);</action><action name="pause_video">	plugin[video1].togglepause();</action><style name="scene_hotspot" depth="800" scale="0.2" distorted="true" ath="0" atv="45"/>	<!--		SPECIAL CASE FOR THE VIDEO PANO ON MOBILE DEVICES		- on mobile devices its only possible to start a video by as reaction to		  a touch-input of the user (a given limitation by the browsers)		- but this will be problemtic when using a VR-navigation without any touching,		  taking off the headset and touching to start the video would be bad...		- as workaround load the video already on startup and use the first		  touch on the screen (e.g. the touch to the 'Enter VR' button) to		  start playing the video		- the video itself will be directly paused after having started and		  not shown on the screen (visible=false)		- additionally there the new setting 'use_as_videopano' that prepares		  the video for a later (=in an other scene) usage as video pano	--><!--    BEGIN HOTSPOT 1-->	<plugin name="video1" keep="true"	        url.flash="plugins/videoplayer.swf"	        url.html5="plugins/videoplayer.js"          videourl="stjohns.mp4"	        videourl.ios="../../videos/dock_small.mp4|../../videos/dock_small.webm"	        loop="true"	        pausedonstart="false"	        visible="false"	        use_as_videopano="true"	        />	<events name="video_events" devices="mobile.or.tablet" keep="true"	        onmousedown="video_auto_start();"	        onremovepano="if(xml.scene != video_scene1, plugin[video1].seek(0); plugin[video1].pause(); );"	        />	<action name="video_auto_start">		if(video_auto_start !== true,			if(plugin[video1].ispaused,				plugin[video1].play();				delayedcall(0.1, plugin[video1].pause() );				set(events[video_events].onmousedown, null);				set(video_auto_start, true);			  );		  );	</action>	<scene name="video_scene1" onstart="plugin[video1].play();">		<image>			<sphere url="plugin:video1" />		</image>	</scene><!--    END HOTSPOT 1--><!-- SPECIAL CASE END -->	<!-- the VR menu - home button, prev/next scene buttons -->	<style name="vr_menu_style" depth="800" scale="0.2" distorted="true" ath="0" atv="45" alpha="0.25" visible="false" />	<hotspot name="vr_menu_bg"   style="vr_menu_style" keep="true" zorder="5" url="images/black.png" width="600" height="120" onover="vr_menu_over();" onout="vr_menu_out();" handcursor="false" />	<hotspot name="vr_menu_home" style="vr_menu_style" keep="true" zorder="6" url="texts/home.png"  onover="vr_menu_over(); delayedcall(0,tween(alpha,0.75,0.1));" onout="vr_menu_out();" startupxml="" onloaded="copy(startupxml, xml.url);" vr_timeout="4000" onclick="vr_menu_loadhome();" />	<hotspot name="vr_menu_l"    style="vr_menu_style" keep="true" zorder="6" url="texts/texts.png" crop="302|92|100|100" ox="-48" onover="vr_menu_over(); delayedcall(0,tween(alpha,0.75,0.1));" onout="vr_menu_out();" vr_timeout="700" onclick="nextscene_loop(-1);" />	<hotspot name="vr_menu_r"    style="vr_menu_style" keep="true" zorder="6" url="texts/texts.png" crop="392|92|100|100" ox="+48" onover="vr_menu_over(); delayedcall(0,tween(alpha,0.75,0.1));" onout="vr_menu_out();" vr_timeout="700" onclick="nextscene_loop(+1);" />	<action name="vr_menu_over">		callwith(hotspot[vr_menu_bg],   tween(alpha|depth,1.0|650); );		callwith(hotspot[vr_menu_home], tween(alpha|depth,0.5|650); );		callwith(hotspot[vr_menu_l],    tween(alpha|depth,0.5|650); );		callwith(hotspot[vr_menu_r],    tween(alpha|depth,0.5|650); );	</action>	<action name="vr_menu_out">		if(hotspot[vr_menu].hovering == false,			callwith(hotspot[vr_menu_bg],   tween(alpha|depth,0.25|800); );			callwith(hotspot[vr_menu_home], tween(alpha|depth,0.25|800); );			callwith(hotspot[vr_menu_l],    tween(alpha|depth,0.25|800); );			callwith(hotspot[vr_menu_r],    tween(alpha|depth,0.25|800); );		  );	</action>	<action name="vr_menu_loadhome">		set(basedir, '');		loadpano(get(startupxml), null, NOPREVIEW|MERGE|KEEPVIEW|KEEPMOVING, BLEND(1));		set(webvr.worldscale,1.0);		vr_menu_setvisibility(false);	</action>	<action name="vr_menu_setvisibility">		set(hotspot[vr_menu_bg].visible,   %1);		set(hotspot[vr_menu_home].visible, %1);		if(scene.count GT 1,			set(hotspot[vr_menu_bg].width, 600);			set(hotspot[vr_menu_l].visible, %1);			set(hotspot[vr_menu_r].visible, %1);		  ,			set(hotspot[vr_menu_bg].width, 320);			set(hotspot[vr_menu_l].visible, false);			set(hotspot[vr_menu_r].visible, false);		  );	</action>	<events name="vr_menu_events" keep="true" onviewchange="vr_menu_following();"  />	<!-- new krpano 1.19 feature: Javascript actions (can be faster than xml actions, HTML5 only) -->	<action name="vr_menu_following" type="Javascript" devices="html5"><![CDATA[		var hs1 = krpano.get("hotspot[vr_menu_bg]");		var hs2 = krpano.get("hotspot[vr_menu_home]");		var hs3 = krpano.get("hotspot[vr_menu_l]");		var hs4 = krpano.get("hotspot[vr_menu_r]");		if(!hs1.hovering && !hs1.hovering && !hs1.hovering && !hs1.hovering)		{			var f = 0.01;	// follow speed factor			var h = krpano.view.hlookat;			var v = krpano.view.vlookat;			var hsh = hs1.ath;			var hsv = hs1.atv;			// map to -180 to +180			h   = (h  -(h|0))   + (((h|0)  +360180)%360) - 180.0;			hsh = (hsh-(hsh|0)) + (((hsh|0)+360180)%360) - 180.0;			// get the shortest horizontal distance			dh = h - hsh;			dh += (dh>180) ? -360 : (dh<-180) ? 360 : 0			// follow slowing horizontally			hsh += dh*f;			// fade out when farther away			var a = Math.abs(v - hs1.atv) / 90.0;			a = 0.5 * Math.max(1.0 - 2.0*Math.sqrt(a), 0);			// move up the more looking down			v = v + 55.0 - v*1.5;			hsv = hsv*(1-f) + v*f;			// set everything			hs2.alpha = hs1.alpha = a;			if(!hs3.hovering) hs3.alpha = a;			if(!hs4.hovering) hs4.alpha = a;			hs4.ath = hs3.ath = hs2.ath = hs1.ath = hsh;			hs4.atv = hs3.atv = hs2.atv = hs1.atv = hsv;		}	]]></action>	<!-- a simpler non-VR fallback version for Flash -->	<action name="vr_menu_following" devices="flash">		copy(h,view.hlookat);		copy(v,view.vlookat);		mul(dv,v,1.5);		add(v,55);		sub(v,dv);		getlooktodistance(a,h,v);		div(a,90);		sub(a,0.5,a);		Math.min(a,0.5);		copy(hs,hotspot[vr_menu_bg]);		copy(hs.ath,h);		copy(hs.atv,v);		copy(hs.alpha,a);		copy(hs,hotspot[vr_menu_home]);		copy(hs.ath,h);		copy(hs.atv,v);		copy(hs.alpha,a);		copy(hs,hotspot[vr_menu_l]);		copy(hs.ath,h);		copy(hs.atv,v);		copy(hs.alpha,a);		copy(hs,hotspot[vr_menu_r]);		copy(hs.ath,h);		copy(hs.atv,v);		copy(hs.alpha,a);	</action><!-- the intro scene 3d hotspots -->	<!-- start button -->	<hotspot name="start" distorted="true"	         url="images/vr-play.png"	         ath="0" atv="0"	         depth="3000"	         vr_timeout="1000"	         zorder="99"	         onclick="changepano( loadscene(video_scene1, null, MERGE|KEEPVIEW|KEEPMOVING, BLEND(1)); );"	         alpha="0.0"	         onloaded="if(vr_start_done === true,  start_vr(); removehotspot(start) , tween(alpha,1); );"	         />	<!-- start animation -->	<action name="start_vr">		set(start_ty, 10000);		set(start_tt, 3.0);		if(vr_start_done === true,			set(start_ty, 75);			set(start_tt, 0.5);		  ,			set(vr_start_done, true);		  );		callwith(hotspot[p1],        copy(ty,start_ty); tween(alpha|ty, 0.5|75, get(start_tt), easeOutQuad|easeOutQuint); );		callwith(hotspot[p1_thumb1], copy(ty,start_ty); tween(alpha|ty, 1.0|75, get(start_tt), easeOutQuad|easeOutQuint, set(enabled,true) ); );		callwith(hotspot[p1_txt],    copy(ty,start_ty); tween(alpha|ty, 1.0|75, get(start_tt), easeOutQuad|easeOutQuint); );	</action>	<!-- panel/thumb styles -->	<style name="panel" distorted="true" enabled="false" zorder="1" url="images/black.png" width="300" height="200" alpha="0.0" depth="700" ty="75"  />	<style name="thumb" distorted="true" enabled="false" capture="false" alpha="0" depth="700" ty="75" onover="tween(depth,680);" onout="tween(depth,700);" />    <!-- center panel -->	<hotspot name="p1" style="panel" ath="0" atv="0" />		<hotspot name="p1_txt"    style="thumb" zorder="2" ath="0" atv="0" url="texts/the-roof.png"  scale="0.3" oy="82" enabled="false" />	<!-- pano changing actions -->	<action name="changepano">		for(set(i,0), i LT hotspot.count, inc(i),			if(hotspot[get(i)].style == 'thumb', set(hotspot[get(i)].enabled, false); );			if(hotspot[get(i)].name != 'vr_cursor', tween(hotspot[get(i)].alpha, 0.0, 0.25); );		  );		delayedcall(0.25, %1; vr_menu_setvisibility(true); );	</action>	<action name="nextscene_loop">		if(xml.scene != null AND scene.count GT 1,			add(newsceneindex, scene[get(xml.scene)].index, %1);			sub(lastsceneindex, scene.count, 1);			if(newsceneindex LT 0, copy(newsceneindex,lastsceneindex));			if(newsceneindex GT lastsceneindex, set(newsceneindex,0));			loadscene(get(scene[get(newsceneindex)].name), null, NOPREVIEW|MERGE|KEEPVIEW|KEEPMOVING, BLEND(1));		  );	</action>	<!-- TEMP PRE-RELEASE STUFF -->	<display hotspotrenderer="webgl" devices="html5" />	<!-- force using WebGL for the hotspots -->	<view continuousupdates="true" devices="html5" />	<!-- constantly update the screen (required for WebGL hotspots for the moment) -->	<!-- TEMP PRE-RELEASE STUFF --></krpano>